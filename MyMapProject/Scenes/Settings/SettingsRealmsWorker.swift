//
//  SettingsWorker.swift
//  MyMapProject
//
//  Created by Enes Kılıç on 31.10.2021.
//  Copyright (c) 2021 Enes Kılıç. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RealmSwift

class SettingsRealmsWorker {
    
    private let realm: Realm! = try? Realm()
    private var userDefaults: Results<UserDefaults>!
    
    init() {
        // Get userDefaults in the realm
        userDefaults = realm.objects(UserDefaults.self)
    }
    
    // MARK: - getShowDistancesBetweenTwoCorners
    func getShowDistancesBetweenTwoCorners() -> Bool? {
        if let userDefaults = userDefaults.first {
            return userDefaults.showDistancesBetweenTwoCorners
        }
        return nil
    }
    
    // MARK: - setIsShowAllUnitsSelected
    func setIsShowAllUnitsSelected(with isSwitchOn: Bool) {
        guard let userDefaults = userDefaults, let userDefaultsFirst = userDefaults.first else { return }
        do {
            try realm.write({
                userDefaultsFirst.showDistancesBetweenTwoCorners = isSwitchOn
            })
        } catch {
            print("Error saving context, \(error)")
        }
    }
    
    // MARK: - showAllSwitchValueChanged
    func setShowAll(isSwitchOn: Bool) {
        guard let userDefaults = userDefaults, let userDefaultsFirst = userDefaults.first else { return }
        do {
            try realm.write({
                userDefaultsFirst.isShowAllUnitsSelected = isSwitchOn
            })
        } catch {
            print("Error saving context, \(error)")
        }
    }
    
    // MARK: - setGeodesicCorrection
    func setGeodesicCorrection(with isSwitchOn: Bool) {
        guard let userDefaults = userDefaults, let userDefaultsFirst = userDefaults.first else { return }
        do {
            try realm.write({
                userDefaultsFirst.isGeodesicActive = isSwitchOn
            })
        } catch {
            print("Error saving context, \(error)")
        }
    }
    
    // MARK: - setBatterySaving
    func setBatterySaving(with isSwitchOn: Bool) {
        guard let userDefaults = userDefaults, let userDefaultsFirst = userDefaults.first else { return }
        do {
            try realm.write({
                userDefaultsFirst.isBatterySaveModeActive = isSwitchOn
            })
        } catch {
            print("Error saving context, \(error)")
        }
    }
    
    // MARK: - setLowDataSwitch
    func setLowDataSwitch(with isSwitchOn: Bool) {
        guard let userDefaults = userDefaults, let userDefaultsFirst = userDefaults.first else { return }
        do {
            try realm.write({
                userDefaultsFirst.isLowDataModeActive = isSwitchOn
            })
        } catch {
            print("Error saving context, \(error)")
        }
    }
}
